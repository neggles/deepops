---
- name: Set PMIx variables
  set_fact:
    pmix_build: no
    pmix_ver_alt: "{{ pmix_version | replace('.','') }}"

- name: check installed PMIx version (if any)
  ansible.builtin.shell:
    cmd: |
      set -o pipefail
      grep PMIX_NUMERIC_VERSION {{ pmix_install_prefix }}/include/pmix_version.h | awk '{print $3}' | tr -d 'x0'
    executable: /bin/bash
  failed_when: false
  changed_when: false
  register: pmix_info_version

- name: build pmix if not installed, the version is different, or rebuild forced
  set_fact:
    pmix_build: yes
  when: pmix_force_rebuild or (pmix_info_version.stdout != pmix_ver_alt)

- name: install pmix build dependencies
  apt:
    name: "{{ slurm_pmix_deps }}"
    state: present
    cache_valid_time: 3600

- name: remove existing pmix packages
  apt:
    name:
      - pmix
      - libpmix-dev
      - libpmix*
    state: absent
    cache_valid_time: 3600
  failed_when: false

- name: check for existing build, uninstall if necessary, and clean up
  when: pmix_build
  block:
    - name: check if we have an old build dir
      ansible.builtin.stat:
        path: "{{ pmix_build_dir }}"
      register: pmix_old_build_dir

    - name: check if we have an old installed lib
      ansible.builtin.stat:
        path: "{{ pmix_install_prefix }}"
      register: pmix_old_install_dir

    - name: attempt to uninstall old version
      community.general.make:
        chdir: "{{ pmix_build_dir }}"
        target: uninstall
        jobs: "{{ ansible_processor_vcpus }}"
      failed_when: false
      when: pmix_old_build_dir.stat.exists and pmix_old_install_dir.stat.exists

    - name: remove old build dir
      ansible.builtin.file:
        path: "{{ pmix_build_dir }}"
        state: absent
      when: pmix_old_build_dir.stat.exists

- name: Build PMIx
  when: pmix_build
  block:
    - name: Create PMIx build directory
      ansible.builtin.file:
        path: "{{ pmix_build_dir }}"
        state: directory
        mode: "0755"

    - name: Download PMIx sources
      ansible.builtin.unarchive:
        src: "{{ pmix_src_url }}"
        dest: "{{ pmix_build_dir }}"
        remote_src: yes
        extra_opts:
          - --strip-components=1
      environment: "{{ proxy_env if proxy_env is defined else {} }}"

    - name: clean PMIx src dir
      community.general.make:
        chdir: "{{ pmix_build_dir }}"
        target: distclean

    - name: configure PMIx
      ansible.builtin.command:
        cmd: "{{ pmix_configure }}"
        chdir: "{{ pmix_build_dir }}"
        creates: "{{ pmix_build_dir }}/Makefile"

    - name: build PMIx
      community.general.make:
        chdir: "{{ pmix_build_dir }}"
        target: all
        jobs: "{{ ansible_processor_vcpus }}"

    - name: install PMIx
      community.general.make:
        chdir: "{{ pmix_build_dir }}"
        target: install
        jobs: "{{ ansible_processor_vcpus }}"
